# -*- coding: utf-8 -*-
"""plano_cabeza_int.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-hxW9UfLhCwzk9PdG_21sbnEJbN9_cly
"""

!pip install pillow ipywidgets matplotlib --quiet

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from ipywidgets import interact, FloatSlider

# ============================
# PARÁMETROS DE CONFIGURACIÓN
# ============================

re_min, re_max = -2, 4
im_min, im_max = -2, 2
ancho, alto = 600, 400
max_iter = 150
eps = 1e-4
esc = 1/eps

# ============================
# FUNCIONES DEL MÉTODO
# ============================

def O_p(z, alpha):
    num = z**3 * (z - 2*(alpha - 1))
    den = 1 - 2*z*(alpha - 1)
    if abs(den) < 1e-10:
        return 1e10
    return num / den

def iterar(z0, alpha):
    z = z0
    for i in range(max_iter):
        if abs(z) < eps:
            return 255, 40, 40     # rojo
        elif abs(z - 1) < eps:
            return 80, 255, 80     # verde
        elif abs(z) > esc:
            return 80, 80, 255     # azul
        z = O_p(z, alpha)
    return 0, 0, 0


# ============================
# FUNCIÓN PARA DIBUJAR EL PLANO
# ============================

# Parámetros del disco
center = 13/6
radius = 1/3


def generar_imagen(alpha_real, alpha_imag):
    alpha = complex(alpha_real, alpha_imag)
    distancia = abs(alpha - center)

    # Verificar posición de alpha respecto al disco D_1
    if distancia < radius:
        mensaje = f"α = {alpha.real:.3f} + {alpha.imag:.3f}i está DENTRO del disco D_1."
    elif abs(distancia - radius) < 1e-10:  # tolerancia para igualdad
        mensaje = f"α = {alpha.real:.3f} + {alpha.imag:.3f}i está EN la circunferencia de D_1."
    else:
        mensaje = f"α = {alpha.real:.3f} + {alpha.imag:.3f}i está FUERA del disco D_1."

    # Mostrar mensaje
    plt.figure(figsize=(7.45, 1))
    plt.text(0.5, 0.5, mensaje,
             horizontalalignment='center', verticalalignment='center', fontsize=14)
    plt.axis('off')
    plt.show()

    img = Image.new("RGB", (ancho, alto))
    pixels = img.load()

    for x in range(ancho):
        for y in range(alto):
            re = re_min + (x / ancho) * (re_max - re_min)
            im = im_max - (y / alto) * (im_max - im_min)
            z0 = complex(re, im)
            pixels[x, y] = iterar(z0, alpha)

    plt.figure(figsize=(8, 5))
    plt.imshow(img)
    plt.axis('off')
    plt.title(f"Plano dinámico para α = {alpha.real:.2f} + {alpha.imag:.2f}i")
    plt.show()

"""### INTERFAZ INTERACTIVA"""

interact(
    generar_imagen,
    alpha_real=FloatSlider(min= -0.4, max = 4.5, step=0.01, value=2, description='Parte real'),
    alpha_imag=FloatSlider(min=-2, max=2, step=0.01, value=0, description='Parte imaginaria')
)

